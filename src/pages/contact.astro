---
import Button from "../components/shared/Button.astro";
import Container from "../components/shared/Container.astro";
import Paragraph from "../components/shared/Paragraph.astro";
import Title from "../components/shared/Title.astro";
import Layout from "../layouts/Layout.astro";
import { iconUser, iconPhone, iconEmail, iconText } from "../utils/data.ts";
---

<Layout title="Contact">
  <Container>
    <main
      class="flex flex-col w-full gap-y-20 md:gap-y-20 overflow-hidden items-center justify-center pt-32 lg:pt-36 relative"
    >
      <div class="w-full "> 
        <Title>Contact</Title>
        <Paragraph className="m-0 p-0 w-full max-w-90"
          >Interested in selling your property? Leave us your details and a
          brief message, and we’ll get in touch! at I Buy Orlando! we’re ready to
          help you find the best option for you, whether it’s a quick sale or
          exploring other alternatives.
        </Paragraph>
      </div>

      <div class="flex w-full p-5">
        <form id="contact-form" class="flex flex-col w-full gap-8">
          <div class="flex w-full gap-3">
            <div
              class="py-1 pl-6 w-full pr-1 flex gap-3 items-center text-heading-3 shadow-lg shadow-box-shadow
                      border border-box-border bg-box-bg rounded-full ease-linear focus-within:bg-body focus-within:border-primary"
            >
              <span class="min-w-max pr-2 border-r border-box-border w-6 h-6">
                <span set:html={iconUser} />
              </span>
              <input
                type="text"
                name="firstName"
                id="firstName"
                placeholder="First Name"
                class="w-full py-3 outline-none bg-transparent"
              />
            </div>

            <div
              class="py-1 pl-6 w-full pr-1 flex gap-3 items-center text-heading-3 shadow-lg shadow-box-shadow
                      border border-box-border bg-box-bg rounded-full ease-linear focus-within:bg-body focus-within:border-primary"
            >
              <span class="min-w-max pr-2 border-r border-box-border w-6 h-6">
                <span set:html={iconUser} />
              </span>
              <input
                type="text"
                name="lastName"
                id="lastName"
                placeholder="Last Name"
                class="w-full py-3 outline-none bg-transparent"
              />
            </div>
          </div>

          <div class="flex w-full gap-3">
            <div
              class="py-1 pl-6 w-full pr-1 flex gap-3 items-center text-heading-3 shadow-lg shadow-box-shadow
                      border border-box-border bg-box-bg rounded-full ease-linear focus-within:bg-body focus-within:border-primary"
            >
              <span class="min-w-max pr-2 border-r border-box-border w-6 h-6">
                <span set:html={iconPhone} />
              </span>
              <input
                type="number"
                name="phone"
                id="phone"
                placeholder="Phone"
                class="w-full py-3 outline-none bg-transparent"
              />
            </div>

            <div
              class="py-1 pl-6 w-full pr-1 flex gap-3 items-center text-heading-3 shadow-lg shadow-box-shadow
                      border border-box-border bg-box-bg rounded-full ease-linear focus-within:bg-body focus-within:border-primary"
            >
              <span class="min-w-max pr-2 border-r border-box-border w-6 h-6">
                <span set:html={iconEmail} />
              </span>
              <input
                type="email"
                name="email"
                id="email"
                placeholder="johndoe@gmail.com"
                class="w-full py-3 outline-none bg-transparent"
              />
            </div>
          </div>

          <div class="flex w-full gap-3">
            <div
              class="py-1 pl-6 w-full pr-1 flex gap-3 items-center text-heading-3 shadow-lg shadow-box-shadow
                      border border-box-border bg-box-bg rounded-full ease-linear focus-within:bg-body focus-within:border-primary"
            >
              <span class="min-w-max pr-2 border-r border-box-border w-6 h-6">
                <span set:html={iconText} />
              </span>
              <textarea
                name="message"
                id="message"
                placeholder="Questions?*"
                class="w-full py-3 min-h-10 outline-none bg-transparent"
              ></textarea>
            </div>
          </div>

          <div class="w-40">
            <Button variant={"primary"} className="w-full text-white ">
              <span class="flex hidden sm:flex relative z-[5] justify-center">
                Enviar
              </span>
              <span class="flex sm:hidden relative z-[5]">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.5"
                  stroke="currentColor"
                  class="w-5 h-5"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"
                  ></path>
                </svg>
              </span>
            </Button>
          </div>
        </form>
      </div>
    </main>
    <p class="text-white" id="status-message"></p>
  </Container>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
      // Casting explícito a HTMLFormElement para evitar el error de tipo
      const form = document.getElementById("contact-form") as HTMLFormElement;
      const statusMessage = document.getElementById("status-message") as HTMLElement | null;

      // Verifica que el formulario y el mensaje de estado existan antes de trabajar con ellos
      if (form && statusMessage) {
          form.addEventListener("submit", async (event) => {
              event.preventDefault(); // Prevenir el envío por defecto
              const formData = new FormData(form);
              const data = Object.fromEntries(formData.entries());

              try {
                  const response = await fetch("https://formcarry.com/s/oFxTk49qvjq", {
                      method: "POST",
                      headers: {
                          "Accept": "application/json",
                          "Content-Type": "application/json",
                      },
                      body: JSON.stringify(data),
                  });
                  
                  // Verifica si la respuesta fue exitosa (código 200)
                  if (!response.ok) {
                      throw new Error("Error al enviar el formulario. Intenta de nuevo.");
                  }

                  const result = await response.json();
                  
                  // Verifica si el resultado tiene el atributo success
                  if (result.success) {
                      statusMessage.textContent = "¡Mensaje enviado con éxito!";
                      form.reset(); // Limpiar el formulario tras el envío exitoso
                  } else {
                      statusMessage.textContent = "Hubo un problema al enviar el mensaje.";
                  }
              } catch (error) {
                  console.error("Error:", error);
                  statusMessage.textContent = "Error al enviar el formulario. Intenta de nuevo.";
              }
          });
      } else {
          // Mensajes de error si no se encuentran los elementos en el DOM
          if (!form) console.error("Formulario no encontrado en el DOM.");
          if (!statusMessage) console.error("Elemento para mensajes de estado no encontrado en el DOM.");
      }
  });
</script>